#!/bin/sh

# "prefix" path for installing "piqi" and "piqic-ocaml" executables
PREFIX=/usr/local

# path for installing Piqi OCaml libraries. If not set, the ocamlfind
# destination directory path will be used. Such path is determined by
# OCAMLFIND_DESTDIR environment variable or by ocamlfind config. You can run
# "ocamlfind printconf destdir" to see the current setting.
OCAML_LIBDIR=


usage() {
echo "
Configuration:
  -h, --help              display this help and exit
  --host HOST             cross-compile toolchain prefix, e.g. i686-w64-mingw32

Installation directories:
  --prefix PREFIX         install piqi executables in PREFIX/bin/
                          [/usr/local]
  --ocaml-libdir DIR      install OCaml libraries to DIR
                          [\`ocamlfind printconf destdir\`]
"
}


while [ "$#" != "0" ]
do
    opt="$1"
    case "$opt" in
        --*=*)
            opt_value=`expr "X$opt" : '[^=]*=\(.*\)'`
            ;;
        --*)
            shift
            opt_value="$1"
            ;;
    esac

    case "$opt" in
        --prefix | --prefix=*)
            PREFIX="$opt_value"
            ;;
        --ocaml-libdir | --ocaml-libdir=*)
            OCAML_LIBDIR="$opt_value"
            ;;
        --host | --host=*)
            SYSTEM_HOST="$opt_value"
            ;;
        -h|-help|--help)
            usage
            exit 0
            ;;
        *)
            echo "configure: run 'configure -h' to get help" 1>&2
            exit 1
            ;;
    esac

    shift
done


if [ -z "$SYSTEM_HOST" ]
then
    OCAMLFIND=ocamlfind
else
    # cross-compilation toolchain
    OCAMLFIND=$SYSTEM_HOST-ocamlfind
fi


OF=`which $OCAMLFIND`
if [ $? -ne 0 ]
then
    echo "configure: error: failed to find ${OCAMLFIND}. See INSTALL for details" 1>&2
    exit 1
fi
echo "found $OCAMLFIND: $OF"


M=Makefile.config

# configure options
echo "# Makefile.config generated by ./configure" > $M
echo >> $M
echo "PIQI_PREFIX=$PREFIX" >> $M
echo "PIQI_OCAML_DESTDIR=$OCAML_LIBDIR" >> $M
echo >> $M

# build environment
echo "export PIQI_ROOT := `pwd`" >> $M
# temporary build directory
echo "export PIQI_BUILD := \$(PIQI_ROOT)/build" >> $M
# path to .piqi files
echo "export PIQI_PATH := \$(PIQI_ROOT)" >> $M
# path to the "piqi" executable
echo "export PIQI := \$(PIQI_ROOT)/src/piqi" >> $M
echo >> $M

# we have to define these for cross-compilation
if [ -n "$SYSTEM_HOST" ]
then
    echo "export OCAMLFIND := $SYSTEM_HOST-ocamlfind" >> $M
    echo "export AR := $SYSTEM_HOST-ar" >> $M
    echo "STRIP := $SYSTEM_HOST-strip" >> $M

    # skipping everything else in cross-compilation mode; namely, we have to
    # cross-compile deps that come with the package
    echo "export SYSTEM := unix" >> $M
else
    # detecting the type of OCaml toolchain
    system="`ocamlc -config 2>/dev/null | grep system | sed 's/system: //'`"
    echo "export SYSTEM := $system" >> $M
    echo >> $M
    echo "detected $system OCaml toolchain"
fi

# figure out which dependencies we need to build
echo "checking whether necessary dependencies are already installed..."
for i in xmlm ulex easy-format optcomp base64 bytes
do
    dir="`$OCAMLFIND query $i 2>/dev/null`"
    if [ $? -eq 0 ]
    then
        echo "$i is installed in $dir"
        echo "SKIP-$i = 1" >> $M
    else
        echo "$i is not installed; it will be built during \"make deps\""
    fi
done

OCAML_VERSION=`$OCAMLFIND ocamlc -version`
if [ $? -ne 0 ]
then
    echo "configure: error: failed to get OCaml version" 1>&2
    exit 1
fi
echo "ocaml version: $OCAML_VERSION"

# determine presence of the bytes module in the system; with ocamlfind < 1.5 and
# ocaml >= 4.02 bytes module is present while bytes package is missing
case $OCAML_VERSION in
    3.12.*|4.00.*|4.01.*)
        ;;
    3.*)
        echo "configure: error: OCaml version is too old. See INSTALL for details" 1>&2
        exit 1
        ;;
    *)
        echo "OCAML_BYTES_PRESENT = 1" >> $M
        ;;
esac


echo "configure OK"


# ex: sw=4 ts=4 et
